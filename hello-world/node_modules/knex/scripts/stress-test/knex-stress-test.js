const Knex = require('../../lib');

const toxiproxy = require('toxiproxy-node-client');
const toxicli = new toxiproxy.Toxiproxy('http://localhost:8474');
const rp = require('request-promise-native');
const delay = require('../../lib/execution/internal/delay');

// init instances
const pg = Knex({
  client: 'pg',
  connection:
    'postgres://postgres:postgresrootpassword@localhost:25432/postgres',
  pool: { max: 50 },
});

const pgnative = Knex({
  client: 'pgnative',
  connection:
    'postgres://postgres:postgresrootpassword@localhost:25433/postgres',
  pool: { max: 50 },
});

const mysql2 = Knex({
  client: 'mysql2',
  connection:
    'mysql://root:mysqlrootpassword@localhost:23306/?charset=utf8&connectTimeout=500',
  pool: { max: 50 },
});

const mysql = Knex({
  client: 'mysql',
  connection:
    'mysql://root:mysqlrootpassword@localhost:23306/?charset=utf8&connectTimeout=500',
  pool: { max: 50 },
});

const mssql = Knex({
  client: 'mssql',
  connection: {
    port: 21433,
    user: 'sa',
    password: 'S0meVeryHardPassword',
    server: 'localhost',
    requestTimeout: 500,
  },
  pool: { max: 50 },
});

/* TODO: figure out how to nicely install oracledb node driver on osx
const oracledb = Knex({
  client: 'oracledb',
  connection: {
    user          : "travis",
    password      : "travis",
    connectString : "localhost/XE",
    // https://github.com/oracle/node-oracledb/issues/525
    stmtCacheSize : 0
  },
  pool: { max: 50 }
});
*/

const counters = {};

function setQueryCounters(instance, name) {
  const counts = (counters[name] = { queries: 0, results: 0, errors: 0 });
  instance.on('query', () => (counts.queries += 1));
  instance.on('query-response', () => (counts.results += 1));
  instance.on('query-error', () => (counts.errors += 1));
}

setQueryCounters(pg, 'pg');
setQueryCounters(mysql, 'mysql');
setQueryCounters(mysql2, 'mysql2');
setQueryCounters(mssql, 'mssql');

const _ = require('lodash');

// start printing out counters
let lastCounters = _.cloneDeep(counters);

setInterval(() => {
  const reqsPerSec = {};
  for (const key of Object.keys(counters)) {
    reqsPerSec[key] = {
      queries: (counters[key].queries - lastCounters[key].queries) / 2,
      results: (counters[key].results - lastCounters[key].results) / 2,
      errors: (counters[key].errors - lastCounters[key].errors) / 2,
    };
  }
  console.log(
    '------------------------ STATS PER SECOND ------------------------'
  );
  console.dir(reqsPerSec, { colors: true });
  console.log(
    '------------------------------- EOS ------------------------------'
  );
  lastCounters = _.cloneDeep(counters);
}, 2000);

async function killConnectionsPg(client) {
  return client.raw(`SELECT pg_terminate_backend(pg_stat_activity.pid)
    FROM pg_stat_activity
    WHERE pg_stat_activity.datname = 'postgres'
      AND pid <> pg_backend_pid()`);
}

async function killConnectionsMyslq(client) {
  const [rows] = await client.raw(`SHOW FULL PROCESSLIST`);
  await Promise.all(rows.map((row) => client.raw(`KILL ${row.Id}`)));
}

async function killConnectionsMssql() {
  const rows = await mssql('sys.dm_exec_sessions').select('session_id');
  await Promise.all(rows.map((row) => mssql.raw(`KILL ${row.session_id}`)));
}

async function main() {
  async function loopQueries(prefix, query) {
    const 