import { defineComponent as y, computed as s, ref as r, onMounted as d, nextTick as F, onUnmounted as m, watch as f, openBlock as g, createElementBlock as b } from "vue";
import { LeafletFlowMap as S } from "@unovis/ts";
import { useForwardProps as L, arePropsEqual as v } from "../../utils/props.js";
const P = /* @__PURE__ */ y({
  __name: "index",
  props: {
    sourceLongitude: { type: [Function, Number, null] },
    sourceLatitude: { type: [Function, Number, null] },
    targetLongitude: { type: [Function, Number, null] },
    targetLatitude: { type: [Function, Number, null] },
    sourcePointRadius: { type: [Function, Number, null] },
    sourcePointColor: { type: [Function, String, Array, null] },
    flowParticleColor: { type: [Function, String, Array, null] },
    flowParticleRadius: { type: [Function, Number, null] },
    flowParticleSpeed: { type: [Function, Number, null] },
    flowParticleDensity: { type: [Function, Number, null] },
    onSourcePointClick: { type: Function },
    onSourcePointMouseEnter: { type: Function },
    onSourcePointMouseLeave: { type: Function },
    width: {},
    height: {},
    flyToDuration: {},
    fitViewPadding: {},
    zoomDuration: {},
    initialBounds: {},
    fitBoundsOnUpdate: {},
    fitViewOnInit: { type: Boolean },
    fitViewOnUpdate: { type: Boolean },
    style: {},
    styleDarkTheme: {},
    accessToken: {},
    attribution: {},
    renderer: {},
    onMapInitialized: { type: Function },
    onMapMoveZoom: { type: Function },
    onMapMoveStart: { type: Function },
    onMapMoveEnd: { type: Function },
    onMapZoomStart: { type: Function },
    onMapZoomEnd: { type: Function },
    onMapClick: { type: Function },
    pointLongitude: { type: [Function, Number, null] },
    pointLatitude: { type: [Function, Number, null] },
    pointId: { type: [Function, String, null] },
    pointShape: { type: [Function, null] },
    pointColor: { type: [Function, String, Array, null] },
    pointRadius: { type: [Function, Number, null] },
    pointLabel: { type: [Function, String, null] },
    pointLabelColor: { type: [Function, String, null] },
    pointBottomLabel: { type: [Function, String, null] },
    pointCursor: { type: [Function, String, null] },
    pointRingWidth: {},
    selectedPointId: {},
    clusterColor: { type: [Function, String, Array, null] },
    clusterRadius: { type: [Function, Number, null] },
    clusterLabel: { type: [Function, String, null] },
    clusterLabelColor: { type: [Function, String, null] },
    clusterBottomLabel: { type: [Function, String, null] },
    clusterRingWidth: {},
    clusterBackground: { type: Boolean },
    clusterExpandOnClick: { type: Boolean },
    clusteringDistance: {},
    colorMap: {},
    topoJSONLayer: {},
    tooltip: {},
    ariaLabel: {},
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(a, { expose: p }) {
    const u = a, c = s(() => u.data), e = L(u), n = r(), o = r();
    return d(() => {
      F(() => {
        o.value && (n.value = new S(o.value, e.value, c.value));
      });
    }), m(() => {
      var t;
      (t = n.value) == null || t.destroy();
    }), f(e, (t, i) => {
      var l;
      v(t, i) || (l = n.value) == null || l.setConfig(e.value);
    }), p({
      component: n
    }), (t, i) => (g(), b("div", {
      "data-vis-leaflet-flow-map": "",
      ref_key: "elRef",
      ref: o
    }, null, 512));
  }
});
export {
  P as default
};
//# sourceMappingURL=index.js.map
