import { defineComponent as s, computed as d, ref as a, onMounted as y, nextTick as m, onUnmounted as F, watch as f, openBlock as g, createElementBlock as v } from "vue";
import { LeafletMap as S } from "@unovis/ts";
import { useForwardProps as b, arePropsEqual as M } from "../../utils/props.js";
const k = /* @__PURE__ */ s({
  __name: "index",
  props: {
    width: {},
    height: {},
    flyToDuration: {},
    fitViewPadding: {},
    zoomDuration: {},
    initialBounds: {},
    fitBoundsOnUpdate: {},
    fitViewOnInit: { type: Boolean },
    fitViewOnUpdate: { type: Boolean },
    style: {},
    styleDarkTheme: {},
    accessToken: {},
    attribution: {},
    renderer: {},
    onMapInitialized: { type: Function },
    onMapMoveZoom: { type: Function },
    onMapMoveStart: { type: Function },
    onMapMoveEnd: { type: Function },
    onMapZoomStart: { type: Function },
    onMapZoomEnd: { type: Function },
    onMapClick: { type: Function },
    pointLongitude: { type: [Function, Number, null] },
    pointLatitude: { type: [Function, Number, null] },
    pointId: { type: [Function, String, null] },
    pointShape: { type: [Function, null] },
    pointColor: { type: [Function, String, Array, null] },
    pointRadius: { type: [Function, Number, null] },
    pointLabel: { type: [Function, String, null] },
    pointLabelColor: { type: [Function, String, null] },
    pointBottomLabel: { type: [Function, String, null] },
    pointCursor: { type: [Function, String, null] },
    pointRingWidth: {},
    selectedPointId: {},
    clusterColor: { type: [Function, String, Array, null] },
    clusterRadius: { type: [Function, Number, null] },
    clusterLabel: { type: [Function, String, null] },
    clusterLabelColor: { type: [Function, String, null] },
    clusterBottomLabel: { type: [Function, String, null] },
    clusterRingWidth: {},
    clusterBackground: { type: Boolean },
    clusterExpandOnClick: { type: Boolean },
    clusteringDistance: {},
    colorMap: {},
    topoJSONLayer: {},
    tooltip: {},
    ariaLabel: {},
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(r, { expose: p }) {
    const i = r, c = d(() => i.data), e = b(i), n = a(), o = a();
    return y(() => {
      m(() => {
        o.value && (n.value = new S(o.value, e.value, c.value));
      });
    }), F(() => {
      var t;
      (t = n.value) == null || t.destroy();
    }), f(e, (t, l) => {
      var u;
      M(t, l) || (u = n.value) == null || u.setConfig(e.value);
    }), p({
      component: n
    }), (t, l) => (g(), v("div", {
      "data-vis-leaflet-map": "",
      ref_key: "elRef",
      ref: o
    }, null, 512));
  }
});
export {
  k as default
};
//# sourceMappingURL=index.js.map
