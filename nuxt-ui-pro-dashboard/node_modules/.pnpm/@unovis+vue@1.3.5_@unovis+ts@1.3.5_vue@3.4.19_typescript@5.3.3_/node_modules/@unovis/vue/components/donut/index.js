import { defineComponent as i, inject as d, computed as m, ref as v, onMounted as g, nextTick as y, onUnmounted as f, watch as l, openBlock as b, createElementBlock as _ } from "vue";
import { Donut as h } from "@unovis/ts";
import { useForwardProps as B, arePropsEqual as F } from "../../utils/props.js";
import { componentAccessorKey as k } from "../../utils/context.js";
const w = { "data-vis-component": "" }, E = /* @__PURE__ */ i({
  __name: "index",
  props: {
    id: { type: Function },
    value: { type: [Function, Number, null] },
    angleRange: {},
    padAngle: {},
    sortFunction: { type: Function },
    cornerRadius: {},
    color: { type: [Function, String, Array, null] },
    radius: {},
    arcWidth: {},
    centralLabel: {},
    centralSubLabel: {},
    centralSubLabelWrap: { type: Boolean },
    showEmptySegments: { type: Boolean },
    emptySegmentAngle: {},
    showBackground: { type: Boolean },
    backgroundAngleRange: {},
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(s, { expose: p }) {
    const r = s, n = d(k), o = m(() => n.data.value ?? r.data), a = B(r), t = v();
    return g(() => {
      y(() => {
        var e;
        t.value = new h(a.value), (e = t.value) == null || e.setData(o.value), n.update(t.value);
      });
    }), f(() => {
      var e;
      (e = t.value) == null || e.destroy(), n.destroy();
    }), l(a, (e, c) => {
      var u;
      F(e, c) || (u = t.value) == null || u.setConfig(a.value);
    }), l(o, () => {
      var e;
      (e = t.value) == null || e.setData(o.value);
    }), p({
      component: t
    }), (e, c) => (b(), _("div", w));
  }
});
export {
  E as default
};
//# sourceMappingURL=index.js.map
