import { defineComponent as s, inject as m, computed as d, ref as y, onMounted as v, nextTick as f, onUnmounted as F, watch as l, openBlock as x, createElementBlock as b } from "vue";
import { Area as _ } from "@unovis/ts";
import { useForwardProps as g, arePropsEqual as h } from "../../utils/props.js";
import { componentAccessorKey as A } from "../../utils/context.js";
const B = { "data-vis-component": "" }, w = /* @__PURE__ */ s({
  __name: "index",
  props: {
    color: { type: [Function, String, Array, null] },
    curveType: {},
    baseline: { type: [Function, Number, null] },
    opacity: { type: [Function, Number, null] },
    cursor: { type: [Function, String, null] },
    minHeight1Px: { type: Boolean },
    x: { type: [Function, Number, null] },
    y: { type: [Function, Number, null, Array] },
    id: { type: Function },
    xScale: { type: [Object, Function] },
    yScale: { type: [Object, Function] },
    excludeFromDomainCalculation: { type: Boolean },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(i, { expose: p }) {
    const u = i, n = m(A), o = d(() => n.data.value ?? u.data), a = g(u), t = y();
    return v(() => {
      f(() => {
        var e;
        t.value = new _(a.value), (e = t.value) == null || e.setData(o.value), n.update(t.value);
      });
    }), F(() => {
      var e;
      (e = t.value) == null || e.destroy(), n.destroy();
    }), l(a, (e, c) => {
      var r;
      h(e, c) || (r = t.value) == null || r.setConfig(a.value);
    }), l(o, () => {
      var e;
      (e = t.value) == null || e.setData(o.value);
    }), p({
      component: t
    }), (e, c) => (x(), b("div", B));
  }
});
export {
  w as default
};
//# sourceMappingURL=index.js.map
