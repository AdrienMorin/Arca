import { defineComponent as p, inject as d, computed as m, ref as y, onMounted as v, nextTick as h, onUnmounted as F, watch as i, openBlock as f, createElementBlock as B } from "vue";
import { Brush as x } from "@unovis/ts";
import { useForwardProps as _, arePropsEqual as b } from "../../utils/props.js";
import { componentAccessorKey as g } from "../../utils/context.js";
const S = { "data-vis-component": "" }, C = /* @__PURE__ */ p({
  __name: "index",
  props: {
    onBrush: { type: Function },
    onBrushStart: { type: Function },
    onBrushMove: { type: Function },
    onBrushEnd: { type: Function },
    handleWidth: {},
    selection: {},
    draggable: { type: Boolean },
    handlePosition: {},
    selectionMinLength: {},
    x: { type: [Function, Number, null] },
    y: { type: [Function, Number, null, Array] },
    id: { type: Function },
    color: { type: [Function, String, Array, null] },
    xScale: { type: [Object, Function] },
    yScale: { type: [Object, Function] },
    excludeFromDomainCalculation: { type: Boolean },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(s, { expose: l }) {
    const c = s, n = d(g), o = m(() => n.data.value ?? c.data), a = _(c), t = y();
    return v(() => {
      h(() => {
        var e;
        t.value = new x(a.value), (e = t.value) == null || e.setData(o.value), n.update(t.value);
      });
    }), F(() => {
      var e;
      (e = t.value) == null || e.destroy(), n.destroy();
    }), i(a, (e, u) => {
      var r;
      b(e, u) || (r = t.value) == null || r.setConfig(a.value);
    }), i(o, () => {
      var e;
      (e = t.value) == null || e.setData(o.value);
    }), l({
      component: t
    }), (e, u) => (f(), B("div", S));
  }
});
export {
  C as default
};
//# sourceMappingURL=index.js.map
