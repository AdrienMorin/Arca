import { defineComponent as p, inject as d, computed as m, ref as y, onMounted as v, nextTick as F, onUnmounted as f, watch as i, openBlock as h, createElementBlock as B } from "vue";
import { FreeBrush as x } from "@unovis/ts";
import { useForwardProps as _, arePropsEqual as b } from "../../utils/props.js";
import { componentAccessorKey as g } from "../../utils/context.js";
const S = { "data-vis-component": "" }, C = /* @__PURE__ */ p({
  __name: "index",
  props: {
    mode: {},
    onBrush: { type: Function },
    onBrushStart: { type: Function },
    onBrushMove: { type: Function },
    onBrushEnd: { type: Function },
    handleWidth: {},
    selection: {},
    selectionMinLength: {},
    autoHide: { type: Boolean },
    x: { type: [Function, Number, null] },
    y: { type: [Function, Number, null, Array] },
    id: { type: Function },
    color: { type: [Function, String, Array, null] },
    xScale: { type: [Object, Function] },
    yScale: { type: [Object, Function] },
    excludeFromDomainCalculation: { type: Boolean },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(s, { expose: l }) {
    const u = s, o = d(g), n = m(() => o.data.value ?? u.data), a = _(u), t = y();
    return v(() => {
      F(() => {
        var e;
        t.value = new x(a.value), (e = t.value) == null || e.setData(n.value), o.update(t.value);
      });
    }), f(() => {
      var e;
      (e = t.value) == null || e.destroy(), o.destroy();
    }), i(a, (e, c) => {
      var r;
      b(e, c) || (r = t.value) == null || r.setConfig(a.value);
    }), i(n, () => {
      var e;
      (e = t.value) == null || e.setData(n.value);
    }), l({
      component: t
    }), (e, c) => (h(), B("div", S));
  }
});
export {
  C as default
};
//# sourceMappingURL=index.js.map
