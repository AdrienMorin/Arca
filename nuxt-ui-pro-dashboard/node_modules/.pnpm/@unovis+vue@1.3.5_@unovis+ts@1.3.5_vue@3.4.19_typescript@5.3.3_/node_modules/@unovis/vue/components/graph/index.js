import { defineComponent as d, inject as y, computed as s, ref as F, onMounted as m, nextTick as S, onUnmounted as b, watch as r, openBlock as g, createElementBlock as k } from "vue";
import { Graph as N } from "@unovis/ts";
import { useForwardProps as L, arePropsEqual as f } from "../../utils/props.js";
import { componentAccessorKey as h } from "../../utils/context.js";
const B = { "data-vis-component": "" }, T = /* @__PURE__ */ d({
  __name: "index",
  props: {
    zoomScaleExtent: {},
    disableZoom: { type: Boolean },
    disableDrag: { type: Boolean },
    zoomThrottledUpdateNodeThreshold: {},
    onZoom: { type: Function },
    layoutType: {},
    layoutAutofit: { type: Boolean },
    layoutAutofitTolerance: {},
    layoutNonConnectedAside: { type: Boolean },
    layoutNodeGroup: { type: [Function, String, null] },
    layoutGroupOrder: {},
    layoutParallelNodesPerColumn: {},
    layoutParallelNodeSubGroup: { type: [Function, String, null] },
    layoutParallelSubGroupsPerRow: {},
    layoutParallelGroupSpacing: {},
    layoutParallelSortConnectionsByGroup: {},
    forceLayoutSettings: {},
    dagreLayoutSettings: {},
    layoutElkSettings: { type: [Function, null] },
    layoutElkNodeGroups: {},
    linkWidth: { type: [Function, Number, null] },
    linkStyle: { type: [Function, null] },
    linkBandWidth: { type: [Function, Number, null] },
    linkArrow: { type: [Function, null] },
    linkStroke: { type: [Function, String, Array, null] },
    linkDisabled: { type: [Function, Boolean, null] },
    linkFlow: { type: [Function, Boolean, null] },
    linkFlowAnimDuration: {},
    linkFlowParticleSize: {},
    linkLabel: { type: [Function, null] },
    linkLabelShiftFromCenter: { type: [Function, Boolean, null] },
    linkNeighborSpacing: {},
    selectedLinkId: {},
    nodeSize: { type: [Function, Number, null] },
    nodeStrokeWidth: { type: [Function, Number, null] },
    nodeShape: { type: [Function, null] },
    nodeGaugeValue: { type: [Function, Number, null] },
    nodeGaugeFill: { type: [Function, String, Array, null] },
    nodeGaugeAnimDuration: {},
    nodeIcon: { type: [Function, String, null] },
    nodeIconSize: { type: [Function, Number, null] },
    nodeLabel: { type: [Function, String, null] },
    nodeLabelTrim: { type: [Function, Boolean, null] },
    nodeLabelTrimMode: { type: [Function, null] },
    nodeLabelTrimLength: { type: [Function, Number, null] },
    nodeSubLabel: { type: [Function, String, null] },
    nodeSubLabelTrim: { type: [Function, Boolean, null] },
    nodeSubLabelTrimMode: { type: [Function, null] },
    nodeSubLabelTrimLength: { type: [Function, Number, null] },
    nodeSideLabels: { type: [Function, null] },
    nodeBottomIcon: { type: [Function, String, null] },
    nodeDisabled: { type: [Function, Boolean, null] },
    nodeFill: { type: [Function, String, Array, null] },
    nodeStroke: { type: [Function, String, Array, null] },
    nodeSort: { type: Function },
    nodeEnterPosition: { type: [Function, null] },
    nodeEnterScale: { type: [Function, Number, null] },
    nodeExitPosition: { type: [Function, null] },
    nodeExitScale: { type: [Function, Number, null] },
    selectedNodeId: {},
    panels: {},
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(c, { expose: p }) {
    const u = c, o = y(h), t = s(() => o.data.value ?? u.data), l = L(u), e = F();
    return m(() => {
      S(() => {
        var n;
        e.value = new N(l.value), (n = e.value) == null || n.setData(t.value), o.update(e.value);
      });
    }), b(() => {
      var n;
      (n = e.value) == null || n.destroy(), o.destroy();
    }), r(l, (n, i) => {
      var a;
      f(n, i) || (a = e.value) == null || a.setConfig(l.value);
    }), r(t, () => {
      var n;
      (n = e.value) == null || n.setData(t.value);
    }), p({
      component: e
    }), (n, i) => (g(), k("div", B));
  }
});
export {
  T as default
};
//# sourceMappingURL=index.js.map
