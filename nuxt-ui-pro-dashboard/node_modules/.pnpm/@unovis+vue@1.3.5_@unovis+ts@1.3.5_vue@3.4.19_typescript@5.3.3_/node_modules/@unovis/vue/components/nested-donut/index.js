import { defineComponent as i, inject as m, computed as d, ref as y, onMounted as g, nextTick as v, onUnmounted as f, watch as u, openBlock as b, createElementBlock as S } from "vue";
import { NestedDonut as B } from "@unovis/ts";
import { useForwardProps as _, arePropsEqual as h } from "../../utils/props.js";
import { componentAccessorKey as w } from "../../utils/context.js";
const F = { "data-vis-component": "" }, C = /* @__PURE__ */ i({
  __name: "index",
  props: {
    angleRange: {},
    direction: {},
    value: { type: [Function, Number, null] },
    centralLabel: {},
    centralSubLabel: {},
    centralSubLabelWrap: { type: Boolean },
    showBackground: { type: Boolean },
    sort: { type: Function },
    layers: {},
    layerSettings: { type: [Function, null] },
    layerPadding: {},
    cornerRadius: {},
    emptySegmentAngle: {},
    hideOverflowingSegmentLabels: { type: Boolean },
    segmentColor: { type: [Function, String, Array, null] },
    segmentLabel: { type: [Function, String, null] },
    segmentLabelColor: { type: [Function, String, Array, null] },
    showEmptySegments: { type: Boolean },
    showSegmentLabels: { type: Boolean },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(c, { expose: p }) {
    const r = c, n = m(w), o = d(() => n.data.value ?? r.data), a = _(r), t = y();
    return g(() => {
      v(() => {
        var e;
        t.value = new B(a.value), (e = t.value) == null || e.setData(o.value), n.update(t.value);
      });
    }), f(() => {
      var e;
      (e = t.value) == null || e.destroy(), n.destroy();
    }), u(a, (e, l) => {
      var s;
      h(e, l) || (s = t.value) == null || s.setConfig(a.value);
    }), u(o, () => {
      var e;
      (e = t.value) == null || e.setData(o.value);
    }), p({
      component: t
    }), (e, l) => (b(), S("div", F));
  }
});
export {
  C as default
};
//# sourceMappingURL=index.js.map
