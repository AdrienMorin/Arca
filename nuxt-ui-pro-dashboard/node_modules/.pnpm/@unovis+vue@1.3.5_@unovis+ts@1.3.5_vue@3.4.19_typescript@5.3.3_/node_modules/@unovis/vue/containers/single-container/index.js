import { defineComponent as f, toRefs as m, reactive as u, ref as v, watchEffect as g, watch as w, onUnmounted as y, provide as p, openBlock as _, createElementBlock as h, renderSlot as C, toRaw as r } from "vue";
import { SingleContainer as R } from "@unovis/ts";
import { componentAccessorKey as k, tooltipAccessorKey as x } from "../../utils/context.js";
import { useForwardProps as A } from "../../utils/props.js";
const S = /* @__PURE__ */ f({
  __name: "index",
  props: {
    component: {},
    tooltip: {},
    duration: {},
    margin: {},
    padding: {},
    sizing: {},
    width: {},
    height: {},
    svgDefs: {},
    ariaLabel: {},
    data: {}
  },
  setup(c, { expose: d }) {
    const a = c, { data: n } = m(a), l = A(a);
    let e;
    const o = u({
      component: void 0,
      tooltip: void 0
    }), i = v(), s = () => {
      e || i.value && o.component && (e = new R(i.value, { ...r(o) }, n.value));
    };
    return g(() => {
      var t;
      s(), (t = o.component) == null || t.config, e == null || e.updateContainer({ ...r(l.value), ...r(o) });
    }), w(n, () => {
      e ? e.setData(n.value, !0) : s();
    }), y(() => e == null ? void 0 : e.destroy()), p(k, {
      data: n,
      update: (t) => o.component = t,
      destroy: () => o.component = void 0
    }), p(x, {
      data: n,
      update: (t) => o.tooltip = t,
      destroy: () => {
        o.tooltip = void 0;
      }
    }), d({
      component: e
    }), (t, B) => (_(), h("div", {
      "data-vis-single-container": "",
      ref_key: "elRef",
      ref: i,
      class: "unovis-single-container"
    }, [
      C(t.$slots, "default")
    ], 512));
  }
});
export {
  S as default
};
//# sourceMappingURL=index.js.map
